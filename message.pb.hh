// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace message {
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
}  // namespace message

namespace message {

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_message_2eproto

enum Node_MsgType {
  Node_MsgType_NODE = 0,
  Node_MsgType_DONE = 1,
  Node_MsgType_START = 2,
  Node_MsgType_CONNECT = 3
};
bool Node_MsgType_IsValid(int value);
const Node_MsgType Node_MsgType_MsgType_MIN = Node_MsgType_NODE;
const Node_MsgType Node_MsgType_MsgType_MAX = Node_MsgType_CONNECT;
const int Node_MsgType_MsgType_ARRAYSIZE = Node_MsgType_MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Node_MsgType_descriptor();
inline const ::std::string& Node_MsgType_Name(Node_MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Node_MsgType_descriptor(), value);
}
inline bool Node_MsgType_Parse(
    const ::std::string& name, Node_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Node_MsgType>(
    Node_MsgType_descriptor(), name, value);
}
enum Node_NodeStatus {
  Node_NodeStatus_SOLVED = 0,
  Node_NodeStatus_FAILED = 1,
  Node_NodeStatus_BRANCH = 2,
  Node_NodeStatus_UNDETERMINED = 3,
  Node_NodeStatus_STOP = 4,
  Node_NodeStatus_UNSTOP = 5,
  Node_NodeStatus_SKIPPED = 6,
  Node_NodeStatus_MERGING = 7
};
bool Node_NodeStatus_IsValid(int value);
const Node_NodeStatus Node_NodeStatus_NodeStatus_MIN = Node_NodeStatus_SOLVED;
const Node_NodeStatus Node_NodeStatus_NodeStatus_MAX = Node_NodeStatus_MERGING;
const int Node_NodeStatus_NodeStatus_ARRAYSIZE = Node_NodeStatus_NodeStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* Node_NodeStatus_descriptor();
inline const ::std::string& Node_NodeStatus_Name(Node_NodeStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    Node_NodeStatus_descriptor(), value);
}
inline bool Node_NodeStatus_Parse(
    const ::std::string& name, Node_NodeStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Node_NodeStatus>(
    Node_NodeStatus_descriptor(), name, value);
}
// ===================================================================

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  inline Node* New() const PROTOBUF_FINAL { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Node_MsgType MsgType;
  static const MsgType NODE =
    Node_MsgType_NODE;
  static const MsgType DONE =
    Node_MsgType_DONE;
  static const MsgType START =
    Node_MsgType_START;
  static const MsgType CONNECT =
    Node_MsgType_CONNECT;
  static inline bool MsgType_IsValid(int value) {
    return Node_MsgType_IsValid(value);
  }
  static const MsgType MsgType_MIN =
    Node_MsgType_MsgType_MIN;
  static const MsgType MsgType_MAX =
    Node_MsgType_MsgType_MAX;
  static const int MsgType_ARRAYSIZE =
    Node_MsgType_MsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgType_descriptor() {
    return Node_MsgType_descriptor();
  }
  static inline const ::std::string& MsgType_Name(MsgType value) {
    return Node_MsgType_Name(value);
  }
  static inline bool MsgType_Parse(const ::std::string& name,
      MsgType* value) {
    return Node_MsgType_Parse(name, value);
  }

  typedef Node_NodeStatus NodeStatus;
  static const NodeStatus SOLVED =
    Node_NodeStatus_SOLVED;
  static const NodeStatus FAILED =
    Node_NodeStatus_FAILED;
  static const NodeStatus BRANCH =
    Node_NodeStatus_BRANCH;
  static const NodeStatus UNDETERMINED =
    Node_NodeStatus_UNDETERMINED;
  static const NodeStatus STOP =
    Node_NodeStatus_STOP;
  static const NodeStatus UNSTOP =
    Node_NodeStatus_UNSTOP;
  static const NodeStatus SKIPPED =
    Node_NodeStatus_SKIPPED;
  static const NodeStatus MERGING =
    Node_NodeStatus_MERGING;
  static inline bool NodeStatus_IsValid(int value) {
    return Node_NodeStatus_IsValid(value);
  }
  static const NodeStatus NodeStatus_MIN =
    Node_NodeStatus_NodeStatus_MIN;
  static const NodeStatus NodeStatus_MAX =
    Node_NodeStatus_NodeStatus_MAX;
  static const int NodeStatus_ARRAYSIZE =
    Node_NodeStatus_NodeStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NodeStatus_descriptor() {
    return Node_NodeStatus_descriptor();
  }
  static inline const ::std::string& NodeStatus_Name(NodeStatus value) {
    return Node_NodeStatus_Name(value);
  }
  static inline bool NodeStatus_Parse(const ::std::string& name,
      NodeStatus* value) {
    return Node_NodeStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string label = 10;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 10;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // optional string solution = 12;
  bool has_solution() const;
  void clear_solution();
  static const int kSolutionFieldNumber = 12;
  const ::std::string& solution() const;
  void set_solution(const ::std::string& value);
  #if LANG_CXX11
  void set_solution(::std::string&& value);
  #endif
  void set_solution(const char* value);
  void set_solution(const char* value, size_t size);
  ::std::string* mutable_solution();
  ::std::string* release_solution();
  void set_allocated_solution(::std::string* solution);

  // optional string nogood = 13;
  bool has_nogood() const;
  void clear_nogood();
  static const int kNogoodFieldNumber = 13;
  const ::std::string& nogood() const;
  void set_nogood(const ::std::string& value);
  #if LANG_CXX11
  void set_nogood(::std::string&& value);
  #endif
  void set_nogood(const char* value);
  void set_nogood(const char* value, size_t size);
  ::std::string* mutable_nogood();
  ::std::string* release_nogood();
  void set_allocated_nogood(::std::string* nogood);

  // optional string info = 14;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 14;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  #if LANG_CXX11
  void set_info(::std::string&& value);
  #endif
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // required .message.Node.MsgType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::message::Node_MsgType type() const;
  void set_type(::message::Node_MsgType value);

  // optional int32 sid = 2;
  bool has_sid() const;
  void clear_sid();
  static const int kSidFieldNumber = 2;
  ::google::protobuf::int32 sid() const;
  void set_sid(::google::protobuf::int32 value);

  // optional int32 pid = 3;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 3;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // optional int32 alt = 4;
  bool has_alt() const;
  void clear_alt();
  static const int kAltFieldNumber = 4;
  ::google::protobuf::int32 alt() const;
  void set_alt(::google::protobuf::int32 value);

  // optional int32 kids = 5;
  bool has_kids() const;
  void clear_kids();
  static const int kKidsFieldNumber = 5;
  ::google::protobuf::int32 kids() const;
  void set_kids(::google::protobuf::int32 value);

  // optional .message.Node.NodeStatus status = 6;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  ::message::Node_NodeStatus status() const;
  void set_status(::message::Node_NodeStatus value);

  // optional uint64 time = 8;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 8;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // optional int32 restart_id = 7;
  bool has_restart_id() const;
  void clear_restart_id();
  static const int kRestartIdFieldNumber = 7;
  ::google::protobuf::int32 restart_id() const;
  void set_restart_id(::google::protobuf::int32 value);

  // optional int32 thread_id = 9;
  bool has_thread_id() const;
  void clear_thread_id();
  static const int kThreadIdFieldNumber = 9;
  ::google::protobuf::int32 thread_id() const;
  void set_thread_id(::google::protobuf::int32 value);

  // optional float domain_size = 11;
  bool has_domain_size() const;
  void clear_domain_size();
  static const int kDomainSizeFieldNumber = 11;
  float domain_size() const;
  void set_domain_size(float value);

  // optional int32 nogood_bld = 15;
  bool has_nogood_bld() const;
  void clear_nogood_bld();
  static const int kNogoodBldFieldNumber = 15;
  ::google::protobuf::int32 nogood_bld() const;
  void set_nogood_bld(::google::protobuf::int32 value);

  // optional bool uses_assumptions = 16;
  bool has_uses_assumptions() const;
  void clear_uses_assumptions();
  static const int kUsesAssumptionsFieldNumber = 16;
  bool uses_assumptions() const;
  void set_uses_assumptions(bool value);

  // optional int32 backjump_distance = 17;
  bool has_backjump_distance() const;
  void clear_backjump_distance();
  static const int kBackjumpDistanceFieldNumber = 17;
  ::google::protobuf::int32 backjump_distance() const;
  void set_backjump_distance(::google::protobuf::int32 value);

  // optional int32 decision_level = 18;
  bool has_decision_level() const;
  void clear_decision_level();
  static const int kDecisionLevelFieldNumber = 18;
  ::google::protobuf::int32 decision_level() const;
  void set_decision_level(::google::protobuf::int32 value);

  // optional int32 eid = 19;
  bool has_eid() const;
  void clear_eid();
  static const int kEidFieldNumber = 19;
  ::google::protobuf::int32 eid() const;
  void set_eid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:message.Node)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_sid();
  void clear_has_sid();
  void set_has_pid();
  void clear_has_pid();
  void set_has_alt();
  void clear_has_alt();
  void set_has_kids();
  void clear_has_kids();
  void set_has_status();
  void clear_has_status();
  void set_has_restart_id();
  void clear_has_restart_id();
  void set_has_time();
  void clear_has_time();
  void set_has_thread_id();
  void clear_has_thread_id();
  void set_has_label();
  void clear_has_label();
  void set_has_domain_size();
  void clear_has_domain_size();
  void set_has_solution();
  void clear_has_solution();
  void set_has_nogood();
  void clear_has_nogood();
  void set_has_info();
  void clear_has_info();
  void set_has_nogood_bld();
  void clear_has_nogood_bld();
  void set_has_uses_assumptions();
  void clear_has_uses_assumptions();
  void set_has_backjump_distance();
  void clear_has_backjump_distance();
  void set_has_decision_level();
  void clear_has_decision_level();
  void set_has_eid();
  void clear_has_eid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr solution_;
  ::google::protobuf::internal::ArenaStringPtr nogood_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  int type_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 alt_;
  ::google::protobuf::int32 kids_;
  int status_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::int32 restart_id_;
  ::google::protobuf::int32 thread_id_;
  float domain_size_;
  ::google::protobuf::int32 nogood_bld_;
  bool uses_assumptions_;
  ::google::protobuf::int32 backjump_distance_;
  ::google::protobuf::int32 decision_level_;
  ::google::protobuf::int32 eid_;
  friend struct  protobuf_message_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// required .message.Node.MsgType type = 1;
inline bool Node::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Node::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Node::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Node::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::message::Node_MsgType Node::type() const {
  // @@protoc_insertion_point(field_get:message.Node.type)
  return static_cast< ::message::Node_MsgType >(type_);
}
inline void Node::set_type(::message::Node_MsgType value) {
  assert(::message::Node_MsgType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:message.Node.type)
}

// optional int32 sid = 2;
inline bool Node::has_sid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Node::set_has_sid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Node::clear_has_sid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Node::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 Node::sid() const {
  // @@protoc_insertion_point(field_get:message.Node.sid)
  return sid_;
}
inline void Node::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:message.Node.sid)
}

// optional int32 pid = 3;
inline bool Node::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Node::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Node::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Node::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 Node::pid() const {
  // @@protoc_insertion_point(field_get:message.Node.pid)
  return pid_;
}
inline void Node::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:message.Node.pid)
}

// optional int32 alt = 4;
inline bool Node::has_alt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Node::set_has_alt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Node::clear_has_alt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Node::clear_alt() {
  alt_ = 0;
  clear_has_alt();
}
inline ::google::protobuf::int32 Node::alt() const {
  // @@protoc_insertion_point(field_get:message.Node.alt)
  return alt_;
}
inline void Node::set_alt(::google::protobuf::int32 value) {
  set_has_alt();
  alt_ = value;
  // @@protoc_insertion_point(field_set:message.Node.alt)
}

// optional int32 kids = 5;
inline bool Node::has_kids() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Node::set_has_kids() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Node::clear_has_kids() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Node::clear_kids() {
  kids_ = 0;
  clear_has_kids();
}
inline ::google::protobuf::int32 Node::kids() const {
  // @@protoc_insertion_point(field_get:message.Node.kids)
  return kids_;
}
inline void Node::set_kids(::google::protobuf::int32 value) {
  set_has_kids();
  kids_ = value;
  // @@protoc_insertion_point(field_set:message.Node.kids)
}

// optional .message.Node.NodeStatus status = 6;
inline bool Node::has_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Node::set_has_status() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Node::clear_has_status() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Node::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::message::Node_NodeStatus Node::status() const {
  // @@protoc_insertion_point(field_get:message.Node.status)
  return static_cast< ::message::Node_NodeStatus >(status_);
}
inline void Node::set_status(::message::Node_NodeStatus value) {
  assert(::message::Node_NodeStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:message.Node.status)
}

// optional int32 restart_id = 7;
inline bool Node::has_restart_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Node::set_has_restart_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Node::clear_has_restart_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Node::clear_restart_id() {
  restart_id_ = 0;
  clear_has_restart_id();
}
inline ::google::protobuf::int32 Node::restart_id() const {
  // @@protoc_insertion_point(field_get:message.Node.restart_id)
  return restart_id_;
}
inline void Node::set_restart_id(::google::protobuf::int32 value) {
  set_has_restart_id();
  restart_id_ = value;
  // @@protoc_insertion_point(field_set:message.Node.restart_id)
}

// optional uint64 time = 8;
inline bool Node::has_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Node::set_has_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Node::clear_has_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Node::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Node::time() const {
  // @@protoc_insertion_point(field_get:message.Node.time)
  return time_;
}
inline void Node::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:message.Node.time)
}

// optional int32 thread_id = 9;
inline bool Node::has_thread_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Node::set_has_thread_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Node::clear_has_thread_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Node::clear_thread_id() {
  thread_id_ = 0;
  clear_has_thread_id();
}
inline ::google::protobuf::int32 Node::thread_id() const {
  // @@protoc_insertion_point(field_get:message.Node.thread_id)
  return thread_id_;
}
inline void Node::set_thread_id(::google::protobuf::int32 value) {
  set_has_thread_id();
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:message.Node.thread_id)
}

// optional string label = 10;
inline bool Node::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& Node::label() const {
  // @@protoc_insertion_point(field_get:message.Node.label)
  return label_.GetNoArena();
}
inline void Node::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.Node.label)
}
#if LANG_CXX11
inline void Node::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.Node.label)
}
#endif
inline void Node::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.Node.label)
}
inline void Node::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.Node.label)
}
inline ::std::string* Node::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:message.Node.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_label() {
  // @@protoc_insertion_point(field_release:message.Node.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:message.Node.label)
}

// optional float domain_size = 11;
inline bool Node::has_domain_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Node::set_has_domain_size() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Node::clear_has_domain_size() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Node::clear_domain_size() {
  domain_size_ = 0;
  clear_has_domain_size();
}
inline float Node::domain_size() const {
  // @@protoc_insertion_point(field_get:message.Node.domain_size)
  return domain_size_;
}
inline void Node::set_domain_size(float value) {
  set_has_domain_size();
  domain_size_ = value;
  // @@protoc_insertion_point(field_set:message.Node.domain_size)
}

// optional string solution = 12;
inline bool Node::has_solution() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_solution() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_solution() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_solution() {
  solution_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_solution();
}
inline const ::std::string& Node::solution() const {
  // @@protoc_insertion_point(field_get:message.Node.solution)
  return solution_.GetNoArena();
}
inline void Node::set_solution(const ::std::string& value) {
  set_has_solution();
  solution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.Node.solution)
}
#if LANG_CXX11
inline void Node::set_solution(::std::string&& value) {
  set_has_solution();
  solution_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.Node.solution)
}
#endif
inline void Node::set_solution(const char* value) {
  set_has_solution();
  solution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.Node.solution)
}
inline void Node::set_solution(const char* value, size_t size) {
  set_has_solution();
  solution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.Node.solution)
}
inline ::std::string* Node::mutable_solution() {
  set_has_solution();
  // @@protoc_insertion_point(field_mutable:message.Node.solution)
  return solution_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_solution() {
  // @@protoc_insertion_point(field_release:message.Node.solution)
  clear_has_solution();
  return solution_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_solution(::std::string* solution) {
  if (solution != NULL) {
    set_has_solution();
  } else {
    clear_has_solution();
  }
  solution_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), solution);
  // @@protoc_insertion_point(field_set_allocated:message.Node.solution)
}

// optional string nogood = 13;
inline bool Node::has_nogood() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Node::set_has_nogood() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Node::clear_has_nogood() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Node::clear_nogood() {
  nogood_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nogood();
}
inline const ::std::string& Node::nogood() const {
  // @@protoc_insertion_point(field_get:message.Node.nogood)
  return nogood_.GetNoArena();
}
inline void Node::set_nogood(const ::std::string& value) {
  set_has_nogood();
  nogood_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.Node.nogood)
}
#if LANG_CXX11
inline void Node::set_nogood(::std::string&& value) {
  set_has_nogood();
  nogood_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.Node.nogood)
}
#endif
inline void Node::set_nogood(const char* value) {
  set_has_nogood();
  nogood_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.Node.nogood)
}
inline void Node::set_nogood(const char* value, size_t size) {
  set_has_nogood();
  nogood_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.Node.nogood)
}
inline ::std::string* Node::mutable_nogood() {
  set_has_nogood();
  // @@protoc_insertion_point(field_mutable:message.Node.nogood)
  return nogood_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_nogood() {
  // @@protoc_insertion_point(field_release:message.Node.nogood)
  clear_has_nogood();
  return nogood_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_nogood(::std::string* nogood) {
  if (nogood != NULL) {
    set_has_nogood();
  } else {
    clear_has_nogood();
  }
  nogood_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nogood);
  // @@protoc_insertion_point(field_set_allocated:message.Node.nogood)
}

// optional string info = 14;
inline bool Node::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Node::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Node::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Node::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info();
}
inline const ::std::string& Node::info() const {
  // @@protoc_insertion_point(field_get:message.Node.info)
  return info_.GetNoArena();
}
inline void Node::set_info(const ::std::string& value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.Node.info)
}
#if LANG_CXX11
inline void Node::set_info(::std::string&& value) {
  set_has_info();
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.Node.info)
}
#endif
inline void Node::set_info(const char* value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.Node.info)
}
inline void Node::set_info(const char* value, size_t size) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.Node.info)
}
inline ::std::string* Node::mutable_info() {
  set_has_info();
  // @@protoc_insertion_point(field_mutable:message.Node.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_info() {
  // @@protoc_insertion_point(field_release:message.Node.info)
  clear_has_info();
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    set_has_info();
  } else {
    clear_has_info();
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:message.Node.info)
}

// optional int32 nogood_bld = 15;
inline bool Node::has_nogood_bld() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Node::set_has_nogood_bld() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Node::clear_has_nogood_bld() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Node::clear_nogood_bld() {
  nogood_bld_ = 0;
  clear_has_nogood_bld();
}
inline ::google::protobuf::int32 Node::nogood_bld() const {
  // @@protoc_insertion_point(field_get:message.Node.nogood_bld)
  return nogood_bld_;
}
inline void Node::set_nogood_bld(::google::protobuf::int32 value) {
  set_has_nogood_bld();
  nogood_bld_ = value;
  // @@protoc_insertion_point(field_set:message.Node.nogood_bld)
}

// optional bool uses_assumptions = 16;
inline bool Node::has_uses_assumptions() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Node::set_has_uses_assumptions() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Node::clear_has_uses_assumptions() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Node::clear_uses_assumptions() {
  uses_assumptions_ = false;
  clear_has_uses_assumptions();
}
inline bool Node::uses_assumptions() const {
  // @@protoc_insertion_point(field_get:message.Node.uses_assumptions)
  return uses_assumptions_;
}
inline void Node::set_uses_assumptions(bool value) {
  set_has_uses_assumptions();
  uses_assumptions_ = value;
  // @@protoc_insertion_point(field_set:message.Node.uses_assumptions)
}

// optional int32 backjump_distance = 17;
inline bool Node::has_backjump_distance() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Node::set_has_backjump_distance() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Node::clear_has_backjump_distance() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Node::clear_backjump_distance() {
  backjump_distance_ = 0;
  clear_has_backjump_distance();
}
inline ::google::protobuf::int32 Node::backjump_distance() const {
  // @@protoc_insertion_point(field_get:message.Node.backjump_distance)
  return backjump_distance_;
}
inline void Node::set_backjump_distance(::google::protobuf::int32 value) {
  set_has_backjump_distance();
  backjump_distance_ = value;
  // @@protoc_insertion_point(field_set:message.Node.backjump_distance)
}

// optional int32 decision_level = 18;
inline bool Node::has_decision_level() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Node::set_has_decision_level() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Node::clear_has_decision_level() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Node::clear_decision_level() {
  decision_level_ = 0;
  clear_has_decision_level();
}
inline ::google::protobuf::int32 Node::decision_level() const {
  // @@protoc_insertion_point(field_get:message.Node.decision_level)
  return decision_level_;
}
inline void Node::set_decision_level(::google::protobuf::int32 value) {
  set_has_decision_level();
  decision_level_ = value;
  // @@protoc_insertion_point(field_set:message.Node.decision_level)
}

// optional int32 eid = 19;
inline bool Node::has_eid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Node::set_has_eid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Node::clear_has_eid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Node::clear_eid() {
  eid_ = 0;
  clear_has_eid();
}
inline ::google::protobuf::int32 Node::eid() const {
  // @@protoc_insertion_point(field_get:message.Node.eid)
  return eid_;
}
inline void Node::set_eid(::google::protobuf::int32 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:message.Node.eid)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace message

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::message::Node_MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::Node_MsgType>() {
  return ::message::Node_MsgType_descriptor();
}
template <> struct is_proto_enum< ::message::Node_NodeStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::Node_NodeStatus>() {
  return ::message::Node_NodeStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
