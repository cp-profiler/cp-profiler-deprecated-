// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.hh"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace message {
class NodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Node> {
} _Node_default_instance_;

namespace protobuf_message_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, sid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, alt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, kids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, restart_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, thread_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, domain_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, solution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, nogood_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, nogood_bld_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, uses_assumptions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, backjump_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, decision_level_),
  4,
  5,
  6,
  7,
  8,
  9,
  11,
  10,
  12,
  0,
  13,
  1,
  2,
  3,
  14,
  15,
  16,
  17,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 22, sizeof(Node)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Node_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _Node_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Node_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rmessage.proto\022\007message\"\222\004\n\004Node\022#\n\004typ"
      "e\030\001 \002(\0162\025.message.Node.MsgType\022\013\n\003sid\030\002 "
      "\001(\005\022\013\n\003pid\030\003 \001(\005\022\013\n\003alt\030\004 \001(\005\022\014\n\004kids\030\005 "
      "\001(\005\022(\n\006status\030\006 \001(\0162\030.message.Node.NodeS"
      "tatus\022\022\n\nrestart_id\030\007 \001(\005\022\014\n\004time\030\010 \001(\004\022"
      "\021\n\tthread_id\030\t \001(\005\022\r\n\005label\030\n \001(\t\022\023\n\013dom"
      "ain_size\030\013 \001(\002\022\020\n\010solution\030\014 \001(\t\022\016\n\006nogo"
      "od\030\r \001(\t\022\014\n\004info\030\016 \001(\t\022\022\n\nnogood_bld\030\017 \001"
      "(\005\022\030\n\020uses_assumptions\030\020 \001(\010\022\031\n\021backjump"
      "_distance\030\021 \001(\005\022\026\n\016decision_level\030\022 \001(\005\""
      "(\n\007MsgType\022\010\n\004NODE\020\000\022\010\n\004DONE\020\001\022\t\n\005START\020"
      "\002\"r\n\nNodeStatus\022\n\n\006SOLVED\020\000\022\n\n\006FAILED\020\001\022"
      "\n\n\006BRANCH\020\002\022\020\n\014UNDETERMINED\020\003\022\010\n\004STOP\020\004\022"
      "\n\n\006UNSTOP\020\005\022\013\n\007SKIPPED\020\006\022\013\n\007MERGING\020\007B\027\n"
      "\025com.github.cpprofiler"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 582);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_message_2eproto

const ::google::protobuf::EnumDescriptor* Node_MsgType_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[0];
}
bool Node_MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Node_MsgType Node::NODE;
const Node_MsgType Node::DONE;
const Node_MsgType Node::START;
const Node_MsgType Node::MsgType_MIN;
const Node_MsgType Node::MsgType_MAX;
const int Node::MsgType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Node_NodeStatus_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[1];
}
bool Node_NodeStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Node_NodeStatus Node::SOLVED;
const Node_NodeStatus Node::FAILED;
const Node_NodeStatus Node::BRANCH;
const Node_NodeStatus Node::UNDETERMINED;
const Node_NodeStatus Node::STOP;
const Node_NodeStatus Node::UNSTOP;
const Node_NodeStatus Node::SKIPPED;
const Node_NodeStatus Node::MERGING;
const Node_NodeStatus Node::NodeStatus_MIN;
const Node_NodeStatus Node::NodeStatus_MAX;
const int Node::NodeStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kTypeFieldNumber;
const int Node::kSidFieldNumber;
const int Node::kPidFieldNumber;
const int Node::kAltFieldNumber;
const int Node::kKidsFieldNumber;
const int Node::kStatusFieldNumber;
const int Node::kRestartIdFieldNumber;
const int Node::kTimeFieldNumber;
const int Node::kThreadIdFieldNumber;
const int Node::kLabelFieldNumber;
const int Node::kDomainSizeFieldNumber;
const int Node::kSolutionFieldNumber;
const int Node::kNogoodFieldNumber;
const int Node::kInfoFieldNumber;
const int Node::kNogoodBldFieldNumber;
const int Node::kUsesAssumptionsFieldNumber;
const int Node::kBackjumpDistanceFieldNumber;
const int Node::kDecisionLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  solution_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_solution()) {
    solution_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.solution_);
  }
  nogood_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nogood()) {
    nogood_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nogood_);
  }
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_info()) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&decision_level_) -
    reinterpret_cast<char*>(&type_) + sizeof(decision_level_));
  // @@protoc_insertion_point(copy_constructor:message.Node)
}

void Node::SharedCtor() {
  _cached_size_ = 0;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  solution_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nogood_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&decision_level_) -
    reinterpret_cast<char*>(&type_) + sizeof(decision_level_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:message.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  solution_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nogood_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[0].descriptor;
}

const Node& Node::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:message.Node)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_label()) {
      GOOGLE_DCHECK(!label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*label_.UnsafeRawStringPointer())->clear();
    }
    if (has_solution()) {
      GOOGLE_DCHECK(!solution_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*solution_.UnsafeRawStringPointer())->clear();
    }
    if (has_nogood()) {
      GOOGLE_DCHECK(!nogood_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nogood_.UnsafeRawStringPointer())->clear();
    }
    if (has_info()) {
      GOOGLE_DCHECK(!info_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*info_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&alt_) -
      reinterpret_cast<char*>(&type_) + sizeof(alt_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&kids_, 0, reinterpret_cast<char*>(&uses_assumptions_) -
      reinterpret_cast<char*>(&kids_) + sizeof(uses_assumptions_));
  }
  if (_has_bits_[16 / 32] & 196608u) {
    ::memset(&backjump_distance_, 0, reinterpret_cast<char*>(&decision_level_) -
      reinterpret_cast<char*>(&backjump_distance_) + sizeof(decision_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message.Node.MsgType type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::Node_MsgType_IsValid(value)) {
            set_type(static_cast< ::message::Node_MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sid = 2;
      case 2: {
        if (tag == 16u) {
          set_has_sid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pid = 3;
      case 3: {
        if (tag == 24u) {
          set_has_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 alt = 4;
      case 4: {
        if (tag == 32u) {
          set_has_alt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kids = 5;
      case 5: {
        if (tag == 40u) {
          set_has_kids();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kids_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .message.Node.NodeStatus status = 6;
      case 6: {
        if (tag == 48u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::Node_NodeStatus_IsValid(value)) {
            set_status(static_cast< ::message::Node_NodeStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 restart_id = 7;
      case 7: {
        if (tag == 56u) {
          set_has_restart_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restart_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time = 8;
      case 8: {
        if (tag == 64u) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 thread_id = 9;
      case 9: {
        if (tag == 72u) {
          set_has_thread_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string label = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.Node.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float domain_size = 11;
      case 11: {
        if (tag == 93u) {
          set_has_domain_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &domain_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string solution = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_solution()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->solution().data(), this->solution().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.Node.solution");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nogood = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nogood()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nogood().data(), this->nogood().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.Node.nogood");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string info = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message.Node.info");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nogood_bld = 15;
      case 15: {
        if (tag == 120u) {
          set_has_nogood_bld();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nogood_bld_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool uses_assumptions = 16;
      case 16: {
        if (tag == 128u) {
          set_has_uses_assumptions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uses_assumptions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 backjump_distance = 17;
      case 17: {
        if (tag == 136u) {
          set_has_backjump_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backjump_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 decision_level = 18;
      case 18: {
        if (tag == 144u) {
          set_has_decision_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decision_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.Node)
  // required .message.Node.MsgType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  // optional int32 pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pid(), output);
  }

  // optional int32 alt = 4;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->alt(), output);
  }

  // optional int32 kids = 5;
  if (has_kids()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->kids(), output);
  }

  // optional .message.Node.NodeStatus status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  // optional int32 restart_id = 7;
  if (has_restart_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->restart_id(), output);
  }

  // optional uint64 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->time(), output);
  }

  // optional int32 thread_id = 9;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->thread_id(), output);
  }

  // optional string label = 10;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.Node.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->label(), output);
  }

  // optional float domain_size = 11;
  if (has_domain_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->domain_size(), output);
  }

  // optional string solution = 12;
  if (has_solution()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->solution().data(), this->solution().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.Node.solution");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->solution(), output);
  }

  // optional string nogood = 13;
  if (has_nogood()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nogood().data(), this->nogood().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.Node.nogood");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->nogood(), output);
  }

  // optional string info = 14;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.Node.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->info(), output);
  }

  // optional int32 nogood_bld = 15;
  if (has_nogood_bld()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->nogood_bld(), output);
  }

  // optional bool uses_assumptions = 16;
  if (has_uses_assumptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->uses_assumptions(), output);
  }

  // optional int32 backjump_distance = 17;
  if (has_backjump_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->backjump_distance(), output);
  }

  // optional int32 decision_level = 18;
  if (has_decision_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->decision_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:message.Node)
  // required .message.Node.MsgType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  // optional int32 pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pid(), target);
  }

  // optional int32 alt = 4;
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->alt(), target);
  }

  // optional int32 kids = 5;
  if (has_kids()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->kids(), target);
  }

  // optional .message.Node.NodeStatus status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  // optional int32 restart_id = 7;
  if (has_restart_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->restart_id(), target);
  }

  // optional uint64 time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->time(), target);
  }

  // optional int32 thread_id = 9;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->thread_id(), target);
  }

  // optional string label = 10;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.Node.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->label(), target);
  }

  // optional float domain_size = 11;
  if (has_domain_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->domain_size(), target);
  }

  // optional string solution = 12;
  if (has_solution()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->solution().data(), this->solution().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.Node.solution");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->solution(), target);
  }

  // optional string nogood = 13;
  if (has_nogood()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nogood().data(), this->nogood().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.Node.nogood");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->nogood(), target);
  }

  // optional string info = 14;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message.Node.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->info(), target);
  }

  // optional int32 nogood_bld = 15;
  if (has_nogood_bld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->nogood_bld(), target);
  }

  // optional bool uses_assumptions = 16;
  if (has_uses_assumptions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->uses_assumptions(), target);
  }

  // optional int32 backjump_distance = 17;
  if (has_backjump_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->backjump_distance(), target);
  }

  // optional int32 decision_level = 18;
  if (has_decision_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->decision_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.Node)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .message.Node.MsgType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string label = 10;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string solution = 12;
    if (has_solution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->solution());
    }

    // optional string nogood = 13;
    if (has_nogood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nogood());
    }

    // optional string info = 14;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional int32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 pid = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional int32 alt = 4;
    if (has_alt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alt());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 kids = 5;
    if (has_kids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kids());
    }

    // optional .message.Node.NodeStatus status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint64 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional int32 restart_id = 7;
    if (has_restart_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->restart_id());
    }

    // optional int32 thread_id = 9;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thread_id());
    }

    // optional float domain_size = 11;
    if (has_domain_size()) {
      total_size += 1 + 4;
    }

    // optional int32 nogood_bld = 15;
    if (has_nogood_bld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nogood_bld());
    }

    // optional bool uses_assumptions = 16;
    if (has_uses_assumptions()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional int32 backjump_distance = 17;
    if (has_backjump_distance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->backjump_distance());
    }

    // optional int32 decision_level = 18;
    if (has_decision_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decision_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_label()) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (from.has_solution()) {
      set_has_solution();
      solution_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.solution_);
    }
    if (from.has_nogood()) {
      set_has_nogood();
      nogood_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nogood_);
    }
    if (from.has_info()) {
      set_has_info();
      info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_kids()) {
      set_kids(from.kids());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_restart_id()) {
      set_restart_id(from.restart_id());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
    if (from.has_domain_size()) {
      set_domain_size(from.domain_size());
    }
    if (from.has_nogood_bld()) {
      set_nogood_bld(from.nogood_bld());
    }
    if (from.has_uses_assumptions()) {
      set_uses_assumptions(from.uses_assumptions());
    }
  }
  if (from._has_bits_[16 / 32] & 196608u) {
    if (from.has_backjump_distance()) {
      set_backjump_distance(from.backjump_distance());
    }
    if (from.has_decision_level()) {
      set_decision_level(from.decision_level());
    }
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  label_.Swap(&other->label_);
  solution_.Swap(&other->solution_);
  nogood_.Swap(&other->nogood_);
  info_.Swap(&other->info_);
  std::swap(type_, other->type_);
  std::swap(sid_, other->sid_);
  std::swap(pid_, other->pid_);
  std::swap(alt_, other->alt_);
  std::swap(kids_, other->kids_);
  std::swap(status_, other->status_);
  std::swap(time_, other->time_);
  std::swap(restart_id_, other->restart_id_);
  std::swap(thread_id_, other->thread_id_);
  std::swap(domain_size_, other->domain_size_);
  std::swap(nogood_bld_, other->nogood_bld_);
  std::swap(uses_assumptions_, other->uses_assumptions_);
  std::swap(backjump_distance_, other->backjump_distance_);
  std::swap(decision_level_, other->decision_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// required .message.Node.MsgType type = 1;
bool Node::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Node::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void Node::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void Node::clear_type() {
  type_ = 0;
  clear_has_type();
}
::message::Node_MsgType Node::type() const {
  // @@protoc_insertion_point(field_get:message.Node.type)
  return static_cast< ::message::Node_MsgType >(type_);
}
void Node::set_type(::message::Node_MsgType value) {
  assert(::message::Node_MsgType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:message.Node.type)
}

// optional int32 sid = 2;
bool Node::has_sid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Node::set_has_sid() {
  _has_bits_[0] |= 0x00000020u;
}
void Node::clear_has_sid() {
  _has_bits_[0] &= ~0x00000020u;
}
void Node::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
::google::protobuf::int32 Node::sid() const {
  // @@protoc_insertion_point(field_get:message.Node.sid)
  return sid_;
}
void Node::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:message.Node.sid)
}

// optional int32 pid = 3;
bool Node::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Node::set_has_pid() {
  _has_bits_[0] |= 0x00000040u;
}
void Node::clear_has_pid() {
  _has_bits_[0] &= ~0x00000040u;
}
void Node::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
::google::protobuf::int32 Node::pid() const {
  // @@protoc_insertion_point(field_get:message.Node.pid)
  return pid_;
}
void Node::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:message.Node.pid)
}

// optional int32 alt = 4;
bool Node::has_alt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Node::set_has_alt() {
  _has_bits_[0] |= 0x00000080u;
}
void Node::clear_has_alt() {
  _has_bits_[0] &= ~0x00000080u;
}
void Node::clear_alt() {
  alt_ = 0;
  clear_has_alt();
}
::google::protobuf::int32 Node::alt() const {
  // @@protoc_insertion_point(field_get:message.Node.alt)
  return alt_;
}
void Node::set_alt(::google::protobuf::int32 value) {
  set_has_alt();
  alt_ = value;
  // @@protoc_insertion_point(field_set:message.Node.alt)
}

// optional int32 kids = 5;
bool Node::has_kids() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Node::set_has_kids() {
  _has_bits_[0] |= 0x00000100u;
}
void Node::clear_has_kids() {
  _has_bits_[0] &= ~0x00000100u;
}
void Node::clear_kids() {
  kids_ = 0;
  clear_has_kids();
}
::google::protobuf::int32 Node::kids() const {
  // @@protoc_insertion_point(field_get:message.Node.kids)
  return kids_;
}
void Node::set_kids(::google::protobuf::int32 value) {
  set_has_kids();
  kids_ = value;
  // @@protoc_insertion_point(field_set:message.Node.kids)
}

// optional .message.Node.NodeStatus status = 6;
bool Node::has_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Node::set_has_status() {
  _has_bits_[0] |= 0x00000200u;
}
void Node::clear_has_status() {
  _has_bits_[0] &= ~0x00000200u;
}
void Node::clear_status() {
  status_ = 0;
  clear_has_status();
}
::message::Node_NodeStatus Node::status() const {
  // @@protoc_insertion_point(field_get:message.Node.status)
  return static_cast< ::message::Node_NodeStatus >(status_);
}
void Node::set_status(::message::Node_NodeStatus value) {
  assert(::message::Node_NodeStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:message.Node.status)
}

// optional int32 restart_id = 7;
bool Node::has_restart_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Node::set_has_restart_id() {
  _has_bits_[0] |= 0x00000800u;
}
void Node::clear_has_restart_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void Node::clear_restart_id() {
  restart_id_ = 0;
  clear_has_restart_id();
}
::google::protobuf::int32 Node::restart_id() const {
  // @@protoc_insertion_point(field_get:message.Node.restart_id)
  return restart_id_;
}
void Node::set_restart_id(::google::protobuf::int32 value) {
  set_has_restart_id();
  restart_id_ = value;
  // @@protoc_insertion_point(field_set:message.Node.restart_id)
}

// optional uint64 time = 8;
bool Node::has_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Node::set_has_time() {
  _has_bits_[0] |= 0x00000400u;
}
void Node::clear_has_time() {
  _has_bits_[0] &= ~0x00000400u;
}
void Node::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 Node::time() const {
  // @@protoc_insertion_point(field_get:message.Node.time)
  return time_;
}
void Node::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:message.Node.time)
}

// optional int32 thread_id = 9;
bool Node::has_thread_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Node::set_has_thread_id() {
  _has_bits_[0] |= 0x00001000u;
}
void Node::clear_has_thread_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void Node::clear_thread_id() {
  thread_id_ = 0;
  clear_has_thread_id();
}
::google::protobuf::int32 Node::thread_id() const {
  // @@protoc_insertion_point(field_get:message.Node.thread_id)
  return thread_id_;
}
void Node::set_thread_id(::google::protobuf::int32 value) {
  set_has_thread_id();
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:message.Node.thread_id)
}

// optional string label = 10;
bool Node::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Node::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
void Node::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void Node::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
const ::std::string& Node::label() const {
  // @@protoc_insertion_point(field_get:message.Node.label)
  return label_.GetNoArena();
}
void Node::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.Node.label)
}
#if LANG_CXX11
void Node::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.Node.label)
}
#endif
void Node::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.Node.label)
}
void Node::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.Node.label)
}
::std::string* Node::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:message.Node.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Node::release_label() {
  // @@protoc_insertion_point(field_release:message.Node.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:message.Node.label)
}

// optional float domain_size = 11;
bool Node::has_domain_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Node::set_has_domain_size() {
  _has_bits_[0] |= 0x00002000u;
}
void Node::clear_has_domain_size() {
  _has_bits_[0] &= ~0x00002000u;
}
void Node::clear_domain_size() {
  domain_size_ = 0;
  clear_has_domain_size();
}
float Node::domain_size() const {
  // @@protoc_insertion_point(field_get:message.Node.domain_size)
  return domain_size_;
}
void Node::set_domain_size(float value) {
  set_has_domain_size();
  domain_size_ = value;
  // @@protoc_insertion_point(field_set:message.Node.domain_size)
}

// optional string solution = 12;
bool Node::has_solution() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Node::set_has_solution() {
  _has_bits_[0] |= 0x00000002u;
}
void Node::clear_has_solution() {
  _has_bits_[0] &= ~0x00000002u;
}
void Node::clear_solution() {
  solution_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_solution();
}
const ::std::string& Node::solution() const {
  // @@protoc_insertion_point(field_get:message.Node.solution)
  return solution_.GetNoArena();
}
void Node::set_solution(const ::std::string& value) {
  set_has_solution();
  solution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.Node.solution)
}
#if LANG_CXX11
void Node::set_solution(::std::string&& value) {
  set_has_solution();
  solution_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.Node.solution)
}
#endif
void Node::set_solution(const char* value) {
  set_has_solution();
  solution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.Node.solution)
}
void Node::set_solution(const char* value, size_t size) {
  set_has_solution();
  solution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.Node.solution)
}
::std::string* Node::mutable_solution() {
  set_has_solution();
  // @@protoc_insertion_point(field_mutable:message.Node.solution)
  return solution_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Node::release_solution() {
  // @@protoc_insertion_point(field_release:message.Node.solution)
  clear_has_solution();
  return solution_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node::set_allocated_solution(::std::string* solution) {
  if (solution != NULL) {
    set_has_solution();
  } else {
    clear_has_solution();
  }
  solution_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), solution);
  // @@protoc_insertion_point(field_set_allocated:message.Node.solution)
}

// optional string nogood = 13;
bool Node::has_nogood() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Node::set_has_nogood() {
  _has_bits_[0] |= 0x00000004u;
}
void Node::clear_has_nogood() {
  _has_bits_[0] &= ~0x00000004u;
}
void Node::clear_nogood() {
  nogood_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nogood();
}
const ::std::string& Node::nogood() const {
  // @@protoc_insertion_point(field_get:message.Node.nogood)
  return nogood_.GetNoArena();
}
void Node::set_nogood(const ::std::string& value) {
  set_has_nogood();
  nogood_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.Node.nogood)
}
#if LANG_CXX11
void Node::set_nogood(::std::string&& value) {
  set_has_nogood();
  nogood_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.Node.nogood)
}
#endif
void Node::set_nogood(const char* value) {
  set_has_nogood();
  nogood_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.Node.nogood)
}
void Node::set_nogood(const char* value, size_t size) {
  set_has_nogood();
  nogood_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.Node.nogood)
}
::std::string* Node::mutable_nogood() {
  set_has_nogood();
  // @@protoc_insertion_point(field_mutable:message.Node.nogood)
  return nogood_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Node::release_nogood() {
  // @@protoc_insertion_point(field_release:message.Node.nogood)
  clear_has_nogood();
  return nogood_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node::set_allocated_nogood(::std::string* nogood) {
  if (nogood != NULL) {
    set_has_nogood();
  } else {
    clear_has_nogood();
  }
  nogood_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nogood);
  // @@protoc_insertion_point(field_set_allocated:message.Node.nogood)
}

// optional string info = 14;
bool Node::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Node::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
void Node::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void Node::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info();
}
const ::std::string& Node::info() const {
  // @@protoc_insertion_point(field_get:message.Node.info)
  return info_.GetNoArena();
}
void Node::set_info(const ::std::string& value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.Node.info)
}
#if LANG_CXX11
void Node::set_info(::std::string&& value) {
  set_has_info();
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.Node.info)
}
#endif
void Node::set_info(const char* value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.Node.info)
}
void Node::set_info(const char* value, size_t size) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.Node.info)
}
::std::string* Node::mutable_info() {
  set_has_info();
  // @@protoc_insertion_point(field_mutable:message.Node.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Node::release_info() {
  // @@protoc_insertion_point(field_release:message.Node.info)
  clear_has_info();
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    set_has_info();
  } else {
    clear_has_info();
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:message.Node.info)
}

// optional int32 nogood_bld = 15;
bool Node::has_nogood_bld() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Node::set_has_nogood_bld() {
  _has_bits_[0] |= 0x00004000u;
}
void Node::clear_has_nogood_bld() {
  _has_bits_[0] &= ~0x00004000u;
}
void Node::clear_nogood_bld() {
  nogood_bld_ = 0;
  clear_has_nogood_bld();
}
::google::protobuf::int32 Node::nogood_bld() const {
  // @@protoc_insertion_point(field_get:message.Node.nogood_bld)
  return nogood_bld_;
}
void Node::set_nogood_bld(::google::protobuf::int32 value) {
  set_has_nogood_bld();
  nogood_bld_ = value;
  // @@protoc_insertion_point(field_set:message.Node.nogood_bld)
}

// optional bool uses_assumptions = 16;
bool Node::has_uses_assumptions() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Node::set_has_uses_assumptions() {
  _has_bits_[0] |= 0x00008000u;
}
void Node::clear_has_uses_assumptions() {
  _has_bits_[0] &= ~0x00008000u;
}
void Node::clear_uses_assumptions() {
  uses_assumptions_ = false;
  clear_has_uses_assumptions();
}
bool Node::uses_assumptions() const {
  // @@protoc_insertion_point(field_get:message.Node.uses_assumptions)
  return uses_assumptions_;
}
void Node::set_uses_assumptions(bool value) {
  set_has_uses_assumptions();
  uses_assumptions_ = value;
  // @@protoc_insertion_point(field_set:message.Node.uses_assumptions)
}

// optional int32 backjump_distance = 17;
bool Node::has_backjump_distance() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Node::set_has_backjump_distance() {
  _has_bits_[0] |= 0x00010000u;
}
void Node::clear_has_backjump_distance() {
  _has_bits_[0] &= ~0x00010000u;
}
void Node::clear_backjump_distance() {
  backjump_distance_ = 0;
  clear_has_backjump_distance();
}
::google::protobuf::int32 Node::backjump_distance() const {
  // @@protoc_insertion_point(field_get:message.Node.backjump_distance)
  return backjump_distance_;
}
void Node::set_backjump_distance(::google::protobuf::int32 value) {
  set_has_backjump_distance();
  backjump_distance_ = value;
  // @@protoc_insertion_point(field_set:message.Node.backjump_distance)
}

// optional int32 decision_level = 18;
bool Node::has_decision_level() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Node::set_has_decision_level() {
  _has_bits_[0] |= 0x00020000u;
}
void Node::clear_has_decision_level() {
  _has_bits_[0] &= ~0x00020000u;
}
void Node::clear_decision_level() {
  decision_level_ = 0;
  clear_has_decision_level();
}
::google::protobuf::int32 Node::decision_level() const {
  // @@protoc_insertion_point(field_get:message.Node.decision_level)
  return decision_level_;
}
void Node::set_decision_level(::google::protobuf::int32 value) {
  set_has_decision_level();
  decision_level_ = value;
  // @@protoc_insertion_point(field_set:message.Node.decision_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
